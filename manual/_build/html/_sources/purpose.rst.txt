=======================================
開発環境構築の手順
=======================================
*必要条件*
  Git client
  Go - 1.7 or later (for releases before v1.0, 1.6 or later)
  MacOSの場合、Xcodeも必要
  Docker - 1.12 or later
  Docker Compose - 1.8.1 or later
  Pip

※gnutarをインストールしたい場合はHomebrewを用いる

> brew install gnu-tar --with-default-names

  Pipについては以下コマンドをターミナルで実行することでアップグレード可能

> pip install --upgrade pip
> pip install behave nose docker-compose
> pip install -I flask==0.10.1 python-dateutil==2.2 pytz==2014.3 pyyaml==3.10 couchdb==1.0 flask-cors==2.0.1 requests==2.4.3 pyOpenSSL==16.2.0 pysha3==1.0b1 grpcio==1.0.4
> pip install urllib3 ndg-httpsclient pyasn1 ecdsa python-slugify grpcio-tools jinja2 b3j0f.aop six

  DockerはCE(Community Edition)を入れておけばDocker/Docker Compose/Docker Machineすべて入ってくる
  もちろん個別に入れてもよい
  https://www.docker.com/community-edition

インストールしたらターミナルにて

> docker --version
> docker-compose --version
> docker-machine --version

でバージョンを確認すること

Hyperledger FabricはGoで書かれているので、$ GOPATH/srcにHyperledger Fabricのソースリポジトリをクローンする必要がある

> cd $GOPATH/src
> mkdir -p github.com/hyperledger
> cd github.com/hyperledger

ここでクローンするがその際にLinux Foundation ID(以後LFIDと呼ぶ)が必要
したがって登録していない場合サイト( https://identity.linuxfoundation.org/ )で登録する
また、Hyperledger FabricのソースはGerritを用いて管理しているので、SSHキーの登録が必要になる
キーペアを用意する必要があるので以下のコマンドをターミナルで実行

> ssh-keygen -t rsa -C "Ryota Tominaga r-tominaga@gmail.com"
> // 名前とアドレスは自分のものに変えること

そうするとキーペアを保存するファイル名を聞かれるので適当に名前をつける
そのあとパスワードを聞かれるので任意のものに設定する
そして以下コマンド実行

> ssh-add ファイル名のパス(さきほど決めたもの)

次にGerrit( https://gerrit.hyperledger.org/r/#/admin/projects/fabric )にてLFIDでログインする
右上の隅にあるアカウント名をクリックし、ポップアップメニューからSettingsを選択
左のサイドメニューからSSH Public Keysをクリック
そこに作成したキーペアのうち.pubの中身(エディタで開ける)をコピーしたものを貼り付けて、Add keyをクリック
これでSSHキーの登録は終了したので、github.com/hyperledgerにクローンする。LFIDの部分は自分のものを入力

> git clone ssh://LFID@gerrit.hyperledger.org:29418/fabric && scp -p -P 29418 LFID@gerrit.hyperledger.org:hooks/commit-msg fabric/.git/hooks/

Hyperledger Fabricをビルドするには以下コマンド

> cd $GOPATH/src/github.com/hyperledger/fabric
> make dist-clean all

ユニットテストを行う場合は、

> cd $GOPATH/src/github.com/hyperledger/fabric
> make unit-test

ここまでで環境構築は終了
ここからは開発準備としてサンプルを用いてチェーンコードを実行する

> mkdir -p $GOPATH/src/sacc && cd $GOPATH/src/sacc
> touch sacc.go

このwikiにファイル(sacc.go)が添付されているのでダウンロードして置く

チェーンコードをビルドするためには以下コマンド

> go get -u --tags nopkcs11 github.com/hyperledger/fabric/core/chaincode/shim
> go build --tags nopkcs11

Hyperledger Fabric側であらかじめ用意しているサンプルを用いる
まずサンプルをクローンする
/Users,/Volumes,/private,/tmpのどれかの下にクローンすること
もし他の場所にクローンしたい場合はDockerのfile sharingの設定を変更する必要あり

> git clone https://github.com/hyperledger/fabric-samples.git
> cd fabric-samples
> curl -sSL https://goo.gl/iX9dek | bash

> cd fabric-samples/chaincode-docker-devmode
> docker images

こんな感じのが表示されればオッケー

  docker images
  REPOSITORY                     TAG                                  IMAGE ID            CREATED             SIZE
  hyperledger/fabric-tools       latest                               e09f38f8928d        4 hours ago         1.32 GB
  hyperledger/fabric-tools       x86_64-1.0.0                         e09f38f8928d        4 hours ago         1.32 GB
  hyperledger/fabric-orderer     latest                               0df93ba35a25        4 hours ago         179 MB
  hyperledger/fabric-orderer     x86_64-1.0.0                         0df93ba35a25        4 hours ago         179 MB
  hyperledger/fabric-peer        latest                               533aec3f5a01        4 hours ago         182 MB
  hyperledger/fabric-peer        x86_64-1.0.0                         533aec3f5a01        4 hours ago         182 MB
  hyperledger/fabric-ccenv       latest                               4b70698a71d3        4 hours ago         1.29 GB
  hyperledger/fabric-ccenv       x86_64-1.0.0                         4b70698a71d3        4 hours ago         1.29 GB

+*Terminal1*+
以下のコマンドで、ネットワークを開始し、dev mode内にてピアを起動
さらに、チェーンコード環境(環境変数もろもろを含んでいる)とCLIコンテナ(チェーンコードと通信するため)を立ち上げている
チャンネルを作成し、追加するためのコマンドはCLIコンテナ内に組み込まれている
なので、ここではそういう面倒なことは考えずに済むようになっている

> docker-compose -f docker-compose-simple.yaml up

+*Terminal2*+
チェーンコードをビルドして、スタートさせる

> docker exec -it chaincode bash

続いて以下コマンドでコンパイル

> cd sacc
> go build

以下コマンドでチェーンコード(sacc.go)を起動し、検証ピアサーバに登録する

> CORE_PEER_ADDRESS=peer:7051 CORE_CHAINCODE_ID_NAME=mycc:0 ./sacc

+*Terminal3*+
起動したチェーンコードをピアにインストールして使ってみる(これをやらないと以下に出てくる"peer invoke","peer query"といったコマンドが使えない。理由は、ピアがそのチェーンコードのことを知らないため認識できないから)
※ここでいうinstallとは、ピア上にあるファイルシステムにチェーンコードを設置すること
※また、instantiateとは、チェーンコードコンテナをスタートさせることを指す

ユーザーaに所持金として10を初期値に設定

> docker exec -it cli bash
> peer chaincode install -p chaincodedev/chaincode/sacc -n mycc -v 0
> peer chaincode instantiate -n mycc -v 0 -c '{"Args":["a","10"]}' -C myc


所持金を20に変更してみる

> peer chaincode invoke -n mycc -c '{"Args":["set", "a", "20"]}' -C myc

aの所持金をqueryコマンドで参照してみると

> peer chaincode query -n mycc -c '{"Args":["query","a"]}' -C myc

20が戻り値として表示されていれば成功

デフォルトでsaccしかマウントしないが、他のチェーンコードをchaincodeのサブディレクトリに追加すれば簡単にテストとネットワークを再構築可能
